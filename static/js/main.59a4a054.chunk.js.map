{"version":3,"sources":["index.js"],"names":["Competitor","styled","button","props","indexOfColumn","indexOfRow","isClicked","Main","div","mainIndexOfColumn","mainIndexOfRow","Input","className","onChange","value","type","id","newName","placeholder","onChangeOfInput","onKeyPress","onEnter","onClick","App","state","numOfSeeds","seedNum","names","class","bracket4","mainColumn","column","row","match","mainRow","bracket8","bracket16","e","handleChangeOfInput","handleChange","handleClickOfInput","handleEnter","this","bracketType","bracketList","map","text","key","handleClickOfSeed","newNames","arrLength","length","index","undefined","indexOf","splice","setState","enter_or_input","name","target","newNum","Array","fill","arr","newArr","numBracket","clickedArr","renderInput","listBrackets","React","Component","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.59a4a054.chunk.js","sourcesContent":["/**\n * Date: 1/16/2020\n * Purpose: Single elim bracket for \"The Brawl\" hosted by Lawler (Adam Thorton)\n * Author: Robert Richter\n * Notes: Frame work from 'https://codesandbox.io/s/zw6zn9x4kx' by lak801\n * Edits: Heading and Body styles, Set fixed button height, Condensed duplicate code, Added logos,\n *         Bracket now is entered top-down => left to right.         \n */\n\n// eslint-disable-next-line\nimport styled, { css } from \"styled-components\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\n//this is the styled component for the competitor which is just a button\n\n//This ideally will be changed into a direct input\nlet Competitor = styled.button`\n  color: #010101;\n  font-size: 20px;\n  font-weight: bold;\n  text-align: center;\n  height: 50px;\n  grid-column-start: ${props => props.indexOfColumn};\n  grid-row-start: ${props => props.indexOfRow};\n  background-color: ${props => props.isClicked};\n  margin: 25px;\n  border: 2px solid #151221;\n`;\n\n//grid props for the grid created in main\nconst Main = styled.div`\n  grid-template-columns: ${props => props.mainIndexOfColumn};\n  grid-template-rows: ${props => props.mainIndexOfRow};\n  background-color: white;\n  display: grid;\n  height: 100vh;\n  text-align: center;\n`;\n\n//props are passed into the input and input button for things such as a change or button click\nfunction Input(props) {\n  return (\n    <div className=\"intro-components\">\n      <div className=\"size-label\">\n        <h5>Number of Teams</h5>\n      </div>\n      <div className=\"size-label\">\n        <select onChange={props.onChange}>\n          <option value=\"undefined\">Clear bracket</option> />\n          <option value=\"4\">4 Teams</option>\n          <option value=\"8\">8 Teams</option>\n          <option value=\"16\">16 Teams</option>\n        </select>\n      </div>\n      {\n      //This lower div and input is probably going to be deleted\n      }\n      <div>\n        <input\n          type=\"text\"\n          id=\"number\"\n          value={props.newName}\n          placeholder=\"Enter Team Name\"\n          onChange={props.onChangeOfInput}\n          onKeyPress={props.onEnter}\n        />\n        <button onClick={props.onClick}>Submit Team</button>\n      </div>\n    </div>\n  );\n}\n\nclass App extends React.Component {\n  //input is rendered in App\n  renderInput() {\n    return (\n      <Input\n        onChangeOfInput={e => this.handleChangeOfInput(e)}\n        onChange={e => this.handleChange(e)}\n        onClick={e => this.handleClickOfInput(e)}\n        onEnter={e => this.handleEnter(e)}\n        newName={this.state.newName}\n      />\n    );\n  }\n\n  //this does the work of rendering the buttons in Main\n\n  //it allows the competitor to have indexes for css, onClick function, and a key\n  listBrackets() {\n    let bracketType = this.state.bracket4;\n    if (this.state.numOfSeeds === \"4\") {\n      bracketType = this.state.bracket4;\n    }\n    if (this.state.numOfSeeds === \"8\") {\n      bracketType = this.state.bracket8;\n    }\n    if (this.state.numOfSeeds === \"16\") {\n      bracketType = this.state.bracket16;\n    }\n    const bracketList = this.state.names.map((text, key) => {\n      return (\n        <Competitor\n          indexOfColumn={bracketType.column[key]}\n          indexOfRow={bracketType.row[key]}\n          key={key}\n          isClicked={this.state.isClicked[key]}\n          onClick={e => this.handleClickOfSeed(e, key, text)}\n        >\n          {text}\n        </Competitor>\n      );\n    });\n    return (\n      <Main\n        mainIndexOfColumn={bracketType.mainColumn}\n        mainIndexOfRow={bracketType.mainRow}\n        className = \"bracketarea\"\n      >\n        {bracketList}{}\n      </Main>\n    );\n  }\n\n  //this has the grid properties for each bracket\n\n  //match is used to decide where the button's text should move to next\n  constructor(props) {\n    super(props);\n    this.state = {\n      numOfSeeds: 0,\n      seedNum: [],\n      newName: \"\",\n      names: [],\n      isClicked: [],\n      class: \"container\",\n      bracket4: {\n        mainColumn: \"30% 20% 20% 30%\",\n        column: [1, 1, 4, 4, 2, 3],\n        row: [2, 4, 2, 4, 3, 3],\n        match: [4, 4, 5, 5],\n        mainRow: \"20% 20% 20% 20% 20%\"\n      },\n      bracket8: {\n        mainColumn: \"20% 15% 15% 15% 15% 20%\",\n        column: [1, 1, 1, 1, 6, 6, 6, 6, 2, 2, 5, 5, 3, 4],\n        row: [1, 2, 4, 5, 1, 2, 4, 5, 2, 4, 2, 4, 3, 3],\n        match: [8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 13, 12],\n        mainRow: \"20% 20% 20% 20% 20%\"\n      },\n      bracket16: {\n        mainColumn: \"12.5% 12.5% 12.5% 12.5% 12.5% 12.5% 12.5% 12.5%\",\n        column:[1,1,1,1,1,1,1,1,8,8,8,8,8,8,8,8,2,2,2,2,7,7,7,7,3,3,6,6,4,5],\n        row: [1,2,4,5,7,8,10,11,1,2,4,5,7,8,10,11,2,4,8,10,2,4,8,10,3,9,3,9,6,6],\n        match: [16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,28,29],\n        mainRow: \"9% 9% 9% 9% 9% 9% 9% 9% 9% 9% 9%\"\n      }\n    };\n  }\n\n  //functionality to enter key\nenter_or_input(){\n    const newNames = this.state.names;\n    const arrLength = this.state.names.length;\n    let index = 0;\n    if (arrLength === 6) {\n      //checks length of array\n      while (\n        //as long as they are the outside seeds then randomly put the name in it\n        newNames[index] !== undefined ||\n        index === arrLength - 1 ||\n        index === arrLength - 2 ||\n        !newNames.indexOf(this.state.newName) < 0 ||\n        index < 0\n      ) {\n        index = index + 1;\n      }\n    } else if (arrLength === 14) {\n      while (\n        newNames[index] !== undefined ||\n        index === arrLength - 1 ||\n        index === arrLength - 2 ||\n        index === arrLength - 3 ||\n        index === arrLength - 4 ||\n        index === arrLength - 5 ||\n        index === arrLength - 6 ||\n        !newNames.indexOf(this.state.newName) < 0 ||\n        index < 0\n      ) {\n        index = index + 1;\n      }\n    } else if (arrLength === 30) {\n      while (\n        newNames[index] !== undefined ||\n        index === arrLength - 1 ||\n        index === arrLength - 2 ||\n        index === arrLength - 3 ||\n        index === arrLength - 4 ||\n        index === arrLength - 5 ||\n        index === arrLength - 6 ||\n        index === arrLength - 7 ||\n        index === arrLength - 8 ||\n        index === arrLength - 9 ||\n        index === arrLength - 10 ||\n        index === arrLength - 11 ||\n        index === arrLength - 12 ||\n        index === arrLength - 13 ||\n        index === arrLength - 14 ||\n        !newNames.indexOf(this.state.newName) < 0 ||\n        index < 0\n      ) {\n        index = index + 1;\n      }\n    } else {\n      index = undefined;\n\n    }\n    if (index !== undefined) {\n      newNames.splice(index, 1, this.state.newName); //update state of names array\n      this.setState({\n        names: newNames\n      });\n    }\n    this.setState({\n      newName: \"\"\n    });\n}\n  //The following two handles run the enter_or_input method\n  handleEnter(e) {\n    if (e.key === \"Enter\") {\n        this.enter_or_input()\n    }\n  }\n  handleClickOfInput(e) {\n    this.enter_or_input()\n  }\n\n  //when the input is being changed, update the string of new name\n  handleChangeOfInput(e) {\n    const name = e.target.value;\n    this.setState({\n      newName: name\n    });\n  }\n  //updates the number of seeds chosen\n  handleChange(e) {\n    let newNum = e.target.value;\n    this.setState({\n      numOfSeeds: newNum\n    });\n\n    if (newNum === \"undefined\") {\n      this.setState({\n        names: [],\n        class: \"\",\n        isClicked: []\n      });\n    }\n\n    if (newNum === \"4\") {\n      //depending on the seed, fills the arrays with the correct amount of buttons.\n      this.setState({\n        names: Array(6).fill(),\n        class: \"bracket4\",\n        isClicked: Array(6).fill(\"#c1c1c1\")\n      });\n    }\n    if (newNum === \"8\") {\n      this.setState({\n        names: Array(14).fill(),\n        class: \"bracket8\",\n        isClicked: Array(14).fill(\"#c1c1c1\")\n      });\n    }\n    if (newNum === \"16\") {\n      this.setState({\n        names: Array(30).fill(),\n        class: \"bracket16\",\n        isClicked: Array(30).fill(\"#c1c1c1\")\n      });\n    }\n  }\n\n  handleClickOfSeed(e, key, text) {\n    let arr = this.state.names;\n    let newArr = this.state.names;\n    let numBracket = this.state.numOfSeeds;\n    let clickedArr = this.state.isClicked;\n    if (text !== undefined) {\n      if (\n        newArr[key + 1] !== undefined &&\n        key % 2 === 0 &&\n        clickedArr[key + 1] !== \"green\" &&\n        numBracket === \"4\"\n      ) {\n        newArr[this.state.bracket4.match[key]] = arr[key]; //this algorithm decides where the name should go once clicked.\n        clickedArr[key] = \"green\";\n        clickedArr[key + 1] = \"red\"; //uses key plus or minus one and also depends on the bracket size\n      } else if (\n        newArr[key - 1] !== undefined &&\n        key % 2 !== 0 &&\n        clickedArr[key - 1] !== \"green\" &&\n        numBracket === \"4\"\n      ) {\n        newArr[this.state.bracket4.match[key]] = arr[key];\n        clickedArr[key] = \"green\";\n        clickedArr[key - 1] = \"red\";\n      }\n      if (\n        newArr[key + 1] !== undefined &&\n        key % 2 === 0 &&\n        clickedArr[key + 1] !== \"green\" &&\n        numBracket === \"8\"\n      ) {\n        newArr[this.state.bracket8.match[key]] = arr[key];\n        clickedArr[key] = \"green\";\n        clickedArr[key + 1] = \"red\";\n      } else if (\n        newArr[key - 1] !== undefined &&\n        key % 2 !== 0 &&\n        clickedArr[key - 1] !== \"green\" &&\n        numBracket === \"8\"\n      ) {\n        newArr[this.state.bracket8.match[key]] = arr[key];\n        clickedArr[key] = \"green\";\n        clickedArr[key - 1] = \"red\";\n      }\n      if (\n        newArr[key + 1] !== undefined &&\n        key % 2 === 0 &&\n        clickedArr[key + 1] !== \"green\" &&\n        numBracket === \"16\"\n      ) {\n        newArr[this.state.bracket16.match[key]] = arr[key];\n        clickedArr[key] = \"green\";\n        clickedArr[key + 1] = \"red\";\n      } else if (\n        newArr[key - 1] !== undefined &&\n        key % 2 !== 0 &&\n        clickedArr[key - 1] !== \"green\" &&\n        numBracket === \"16\"\n      ) {\n        newArr[this.state.bracket16.match[key]] = arr[key];\n        clickedArr[key] = \"green\";\n        clickedArr[key - 1] = \"red\";\n      }\n    }\n    this.setState({\n      names: newArr\n    });\n  }\n  render() {\n    return (\n      <div className=\"bracketMaker\">\n        <div className=\"heading\">{this.renderInput()}</div>\n        <div className=\"body\" >{this.listBrackets()}</div>\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}